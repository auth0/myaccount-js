// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Auth0MyAccount from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace AuthenticationMethods {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class AuthenticationMethods {
    protected readonly _options: AuthenticationMethods.Options;

    constructor(_options: AuthenticationMethods.Options = {}) {
        this._options = _options;
    }

    /**
     * Retrieve detailed list of authentication methods belonging to the authenticated user.
     *
     * @param {AuthenticationMethods.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.authenticationMethods.list()
     */
    public list(
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyAccount.ListAuthenticationMethodsResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyAccount.ListAuthenticationMethodsResponseContent>> {
        const _metadata: core.EndpointMetadata = { security: [{ "Bearer-DPoP": ["read:me:authentication_methods"] }] };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                "authentication-methods",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyAccount.ListAuthenticationMethodsResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling GET /authentication-methods.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Start the enrollment of a supported authentication method.
     *
     * @param {Auth0MyAccount.CreateAuthenticationMethodRequestContent} request
     * @param {AuthenticationMethods.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.authenticationMethods.create({
     *         type: "passkey"
     *     })
     */
    public create(
        request: Auth0MyAccount.CreateAuthenticationMethodRequestContent,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyAccount.CreateAuthenticationMethodResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Auth0MyAccount.CreateAuthenticationMethodRequestContent,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyAccount.CreateAuthenticationMethodResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ "Bearer-DPoP": ["create:me:authentication_methods"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                "authentication-methods",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyAccount.CreateAuthenticationMethodResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling POST /authentication-methods.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a single authentication method belonging to the authenticated user.
     *
     * @param {Auth0MyAccount.PathAuthenticationMethodId} authenticationMethodId - Authentication Method ID. This value is part of the Location header returned when creating an authentication method. It should be used as it is, without any modifications.
     * @param {AuthenticationMethods.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.NotFoundError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.authenticationMethods.get("authentication_method_id")
     */
    public get(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyAccount.GetAuthenticationMethodResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(authenticationMethodId, requestOptions));
    }

    private async __get(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyAccount.GetAuthenticationMethodResponseContent>> {
        const _metadata: core.EndpointMetadata = { security: [{ "Bearer-DPoP": ["read:me:authentication_methods"] }] };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                `authentication-methods/${encodeURIComponent(authenticationMethodId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyAccount.GetAuthenticationMethodResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyAccount.NotFoundError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling GET /authentication-methods/{authentication_method_id}.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a single authentication method belonging to the authenticated user.
     *
     * @param {Auth0MyAccount.PathAuthenticationMethodId} authenticationMethodId - Authentication Method ID. This value is part of the Location header returned when creating an authentication method. It should be used as it is, without any modifications.
     * @param {AuthenticationMethods.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.authenticationMethods.delete("authentication_method_id")
     */
    public delete(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(authenticationMethodId, requestOptions));
    }

    private async __delete(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ "Bearer-DPoP": ["delete:me:authentication_methods"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                `authentication-methods/${encodeURIComponent(authenticationMethodId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling DELETE /authentication-methods/{authentication_method_id}.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a single authentication method
     *
     * @param {Auth0MyAccount.PathAuthenticationMethodId} authenticationMethodId - Authentication Method ID. This value is part of the Location header returned when creating an authentication method. It should be used as it is, without any modifications.
     * @param {Auth0MyAccount.UpdateAuthenticationMethodRequestContent} request
     * @param {AuthenticationMethods.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.authenticationMethods.update("authentication_method_id")
     */
    public update(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        request: Auth0MyAccount.UpdateAuthenticationMethodRequestContent = {},
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyAccount.UpdateAuthenticationMethodResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(authenticationMethodId, request, requestOptions));
    }

    private async __update(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        request: Auth0MyAccount.UpdateAuthenticationMethodRequestContent = {},
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyAccount.UpdateAuthenticationMethodResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ "Bearer-DPoP": ["update:me:authentication_methods"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                `authentication-methods/${encodeURIComponent(authenticationMethodId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyAccount.UpdateAuthenticationMethodResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling PATCH /authentication-methods/{authentication_method_id}.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Confirm the enrollment of a supported authentication method.
     *
     * @param {Auth0MyAccount.PathAuthenticationMethodId} authenticationMethodId - Authentication Method ID. This value is part of the Location header returned when creating an authentication method. It should be used as it is, without any modifications.
     * @param {Auth0MyAccount.VerifyAuthenticationMethodRequestContent} request
     * @param {AuthenticationMethods.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.authenticationMethods.verify("authentication_method_id", {
     *         auth_session: "auth_session",
     *         authn_response: {
     *             id: "id",
     *             rawId: "rawId",
     *             response: {
     *                 attestationObject: "attestationObject",
     *                 clientDataJSON: "clientDataJSON"
     *             },
     *             type: "public-key"
     *         }
     *     })
     */
    public verify(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        request: Auth0MyAccount.VerifyAuthenticationMethodRequestContent,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyAccount.VerifyAuthenticationMethodResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__verify(authenticationMethodId, request, requestOptions));
    }

    private async __verify(
        authenticationMethodId: Auth0MyAccount.PathAuthenticationMethodId,
        request: Auth0MyAccount.VerifyAuthenticationMethodRequestContent,
        requestOptions?: AuthenticationMethods.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyAccount.VerifyAuthenticationMethodResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ "Bearer-DPoP": ["create:me:authentication_methods"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                `authentication-methods/${encodeURIComponent(authenticationMethodId)}/verify`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyAccount.VerifyAuthenticationMethodResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling POST /authentication-methods/{authentication_method_id}/verify.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string | undefined> {
        const bearer = await core.EndpointSupplier.get(this._options.token, { endpointMetadata });
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
