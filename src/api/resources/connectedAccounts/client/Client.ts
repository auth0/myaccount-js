// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Auth0MyAccount from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { toJson } from "../../../../core/json.js";
import { Connections } from "../resources/connections/client/Client.js";

export declare namespace ConnectedAccounts {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class ConnectedAccounts {
    protected readonly _options: ConnectedAccounts.Options;
    protected _connections: Connections | undefined;

    constructor(_options: ConnectedAccounts.Options = {}) {
        this._options = _options;
    }

    public get connections(): Connections {
        return (this._connections ??= new Connections(this._options));
    }

    /**
     * Start an authorization flow to link the authenticated user's account with an external identity provider.
     *
     * @param {Auth0MyAccount.CreateConnectedAccountsRequestContent} request
     * @param {ConnectedAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.connectedAccounts.create({
     *         connection: "connection",
     *         redirect_uri: "redirect_uri"
     *     })
     */
    public create(
        request: Auth0MyAccount.CreateConnectedAccountsRequestContent,
        requestOptions?: ConnectedAccounts.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyAccount.CreateConnectedAccountsResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Auth0MyAccount.CreateConnectedAccountsRequestContent,
        requestOptions?: ConnectedAccounts.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyAccount.CreateConnectedAccountsResponseContent>> {
        const _metadata: core.EndpointMetadata = { security: undefined };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                "connected-accounts/connect",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyAccount.CreateConnectedAccountsResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling POST /connected-accounts/connect.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Complete a previously started authorization flow to link the authenticated user's account with an external identity provider.
     *
     * @param {Auth0MyAccount.CompleteConnectedAccountsRequestContent} request
     * @param {ConnectedAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.connectedAccounts.complete({
     *         auth_session: "auth_session",
     *         connect_code: "connect_code",
     *         redirect_uri: "redirect_uri"
     *     })
     */
    public complete(
        request: Auth0MyAccount.CompleteConnectedAccountsRequestContent,
        requestOptions?: ConnectedAccounts.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyAccount.CompleteConnectedAccountsResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__complete(request, requestOptions));
    }

    private async __complete(
        request: Auth0MyAccount.CompleteConnectedAccountsRequestContent,
        requestOptions?: ConnectedAccounts.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyAccount.CompleteConnectedAccountsResponseContent>> {
        const _metadata: core.EndpointMetadata = { security: undefined };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                "connected-accounts/complete",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyAccount.CompleteConnectedAccountsResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling POST /connected-accounts/complete.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve connected accounts belonging to the authenticated user.
     *
     * @param {Auth0MyAccount.ListConnectedAccountsRequestParameters} request
     * @param {ConnectedAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.connectedAccounts.list({
     *         connection: "connection",
     *         from: "from",
     *         take: 1
     *     })
     */
    public async list(
        request: Auth0MyAccount.ListConnectedAccountsRequestParameters = {},
        requestOptions?: ConnectedAccounts.RequestOptions,
    ): Promise<core.Page<Auth0MyAccount.ConnectedAccount>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Auth0MyAccount.ListConnectedAccountsRequestParameters,
            ): Promise<core.WithRawResponse<Auth0MyAccount.ListConnectedAccountsResponseContent>> => {
                const _metadata: core.EndpointMetadata = {
                    security: [{ "Bearer-DPoP": ["read:me:authentication_methods"] }],
                };
                const { connection, from: from_, take = 10 } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (connection !== undefined) {
                    _queryParams["connection"] = typeof connection === "string" ? connection : toJson(connection);
                }
                if (from_ !== undefined) {
                    _queryParams["from"] = from_;
                }
                if (take !== undefined) {
                    _queryParams["take"] = take?.toString() ?? null;
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.Auth0MyAccountEnvironment.Default,
                        "connected-accounts/accounts",
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
                    maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                    endpointMetadata: _metadata,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Auth0MyAccount.ListConnectedAccountsResponseContent,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new Auth0MyAccount.BadRequestError(
                                _response.error.body as Auth0MyAccount.ErrorResponse,
                                _response.rawResponse,
                            );
                        case 401:
                            throw new Auth0MyAccount.UnauthorizedError(
                                _response.error.body as Auth0MyAccount.ErrorResponse,
                                _response.rawResponse,
                            );
                        case 403:
                            throw new Auth0MyAccount.ForbiddenError(
                                _response.error.body as Auth0MyAccount.ErrorResponse,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new Auth0MyAccount.TooManyRequestsError(
                                _response.error.body as Auth0MyAccount.ErrorResponse,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.Auth0MyAccountError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.Auth0MyAccountError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.Auth0MyAccountTimeoutError(
                            "Timeout exceeded when calling GET /connected-accounts/accounts.",
                        );
                    case "unknown":
                        throw new errors.Auth0MyAccountError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Auth0MyAccount.ListConnectedAccountsResponseContent, Auth0MyAccount.ConnectedAccount>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.next != null && !(typeof response?.next === "string" && response?.next === ""),
            getItems: (response) => response?.accounts ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "from", response?.next));
            },
        });
    }

    /**
     * Delete a connected account belonging to the authenticated user.
     *
     * @param {Auth0MyAccount.ConnectedAccountId} id - The unique identifier of the connected account
     * @param {ConnectedAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyAccount.BadRequestError}
     * @throws {@link Auth0MyAccount.UnauthorizedError}
     * @throws {@link Auth0MyAccount.ForbiddenError}
     * @throws {@link Auth0MyAccount.TooManyRequestsError}
     *
     * @example
     *     await client.connectedAccounts.delete("id")
     */
    public delete(
        id: Auth0MyAccount.ConnectedAccountId,
        requestOptions?: ConnectedAccounts.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: Auth0MyAccount.ConnectedAccountId,
        requestOptions?: ConnectedAccounts.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _metadata: core.EndpointMetadata = { security: [{ "Bearer-DPoP": ["delete:me:connected_accounts"] }] };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyAccountEnvironment.Default,
                `connected-accounts/accounts/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyAccount.BadRequestError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyAccount.UnauthorizedError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyAccount.ForbiddenError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyAccount.TooManyRequestsError(
                        _response.error.body as Auth0MyAccount.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyAccountError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyAccountError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyAccountTimeoutError(
                    "Timeout exceeded when calling DELETE /connected-accounts/accounts/{id}.",
                );
            case "unknown":
                throw new errors.Auth0MyAccountError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string | undefined> {
        const bearer = await core.EndpointSupplier.get(this._options.token, { endpointMetadata });
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
