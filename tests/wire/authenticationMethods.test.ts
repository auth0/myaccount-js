// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { Auth0MyAccountClient } from "../../src/Client";
import * as Auth0MyAccount from "../../src/api/index";

describe("AuthenticationMethods", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            authentication_methods: [{ id: "id", created_at: "2024-01-15T09:30:00Z", usage: ["primary"] }],
        };
        server
            .mockEndpoint()
            .get("/authentication-methods")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authenticationMethods.list();
        expect(response).toEqual({
            authentication_methods: [
                {
                    id: "id",
                    created_at: "2024-01-15T09:30:00Z",
                    usage: ["primary"],
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.list();
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.list();
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.list();
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.list();
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "passkey" };
        const rawResponseBody = {
            auth_session: "auth_session",
            authn_params_public_key: {
                authenticatorSelection: { residentKey: "required", userVerification: "required" },
                challenge: "challenge",
                pubKeyCredParams: [
                    { alg: -8, type: "public-key" },
                    { alg: -7, type: "public-key" },
                    { alg: -257, type: "public-key" },
                ],
                rp: { id: "id", name: "name" },
                timeout: 60000,
                user: { id: "id", name: "name", displayName: "displayName" },
            },
        };
        server
            .mockEndpoint()
            .post("/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authenticationMethods.create({
            type: "passkey",
        });
        expect(response).toEqual({
            auth_session: "auth_session",
            authn_params_public_key: {
                authenticatorSelection: {
                    residentKey: "required",
                    userVerification: "required",
                },
                challenge: "challenge",
                pubKeyCredParams: [
                    {
                        alg: -8,
                        type: "public-key",
                    },
                    {
                        alg: -7,
                        type: "public-key",
                    },
                    {
                        alg: -257,
                        type: "public-key",
                    },
                ],
                rp: {
                    id: "id",
                    name: "name",
                },
                timeout: 60000,
                user: {
                    id: "id",
                    name: "name",
                    displayName: "displayName",
                },
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "passkey" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.create({
                type: "passkey",
            });
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "passkey" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.create({
                type: "passkey",
            });
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "passkey" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.create({
                type: "passkey",
            });
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "passkey" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.create({
                type: "passkey",
            });
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { id: "id", created_at: "2024-01-15T09:30:00Z", usage: ["primary"] };
        server
            .mockEndpoint()
            .get("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authenticationMethods.get("authentication_method_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            usage: ["primary"],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.get("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.get("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.get("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.get("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.get("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.authenticationMethods.delete("authentication_method_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.delete("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.delete("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.delete("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.delete("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { id: "id", created_at: "2024-01-15T09:30:00Z", usage: ["primary"] };
        server
            .mockEndpoint()
            .patch("/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authenticationMethods.update("authentication_method_id");
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            usage: ["primary"],
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.update("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.update("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.update("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.update("authentication_method_id");
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("verify (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            auth_session: "auth_session",
            authn_response: {
                id: "id",
                rawId: "rawId",
                response: { attestationObject: "attestationObject", clientDataJSON: "clientDataJSON" },
                type: "public-key",
            },
        };
        const rawResponseBody = { id: "id", created_at: "2024-01-15T09:30:00Z", usage: ["primary"] };
        server
            .mockEndpoint()
            .post("/authentication-methods/authentication_method_id/verify")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authenticationMethods.verify("authentication_method_id", {
            auth_session: "auth_session",
            authn_response: {
                id: "id",
                rawId: "rawId",
                response: {
                    attestationObject: "attestationObject",
                    clientDataJSON: "clientDataJSON",
                },
                type: "public-key",
            },
        });
        expect(response).toEqual({
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            usage: ["primary"],
        });
    });

    test("verify (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            auth_session: "auth_session",
            authn_response: {
                id: "id",
                rawId: "rawId",
                response: { attestationObject: "attestationObject", clientDataJSON: "clientDataJSON" },
                type: "public-key",
            },
        };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods/authentication_method_id/verify")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.verify("authentication_method_id", {
                auth_session: "auth_session",
                authn_response: {
                    id: "id",
                    rawId: "rawId",
                    response: {
                        attestationObject: "attestationObject",
                        clientDataJSON: "clientDataJSON",
                    },
                    type: "public-key",
                },
            });
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("verify (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            auth_session: "auth_session",
            authn_response: {
                id: "id",
                rawId: "rawId",
                response: { attestationObject: "attestationObject", clientDataJSON: "clientDataJSON" },
                type: "public-key",
            },
        };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods/authentication_method_id/verify")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.verify("authentication_method_id", {
                auth_session: "auth_session",
                authn_response: {
                    id: "id",
                    rawId: "rawId",
                    response: {
                        attestationObject: "attestationObject",
                        clientDataJSON: "clientDataJSON",
                    },
                    type: "public-key",
                },
            });
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("verify (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            auth_session: "auth_session",
            authn_response: {
                id: "id",
                rawId: "rawId",
                response: { attestationObject: "attestationObject", clientDataJSON: "clientDataJSON" },
                type: "public-key",
            },
        };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods/authentication_method_id/verify")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.verify("authentication_method_id", {
                auth_session: "auth_session",
                authn_response: {
                    id: "id",
                    rawId: "rawId",
                    response: {
                        attestationObject: "attestationObject",
                        clientDataJSON: "clientDataJSON",
                    },
                    type: "public-key",
                },
            });
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("verify (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            auth_session: "auth_session",
            authn_response: {
                id: "id",
                rawId: "rawId",
                response: { attestationObject: "attestationObject", clientDataJSON: "clientDataJSON" },
                type: "public-key",
            },
        };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/authentication-methods/authentication_method_id/verify")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.authenticationMethods.verify("authentication_method_id", {
                auth_session: "auth_session",
                authn_response: {
                    id: "id",
                    rawId: "rawId",
                    response: {
                        attestationObject: "attestationObject",
                        clientDataJSON: "clientDataJSON",
                    },
                    type: "public-key",
                },
            });
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });
});
