// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { Auth0MyAccountClient } from "../../../src/Client";
import * as Auth0MyAccount from "../../../src/api/index";

describe("Connections", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            connections: [{ name: "name", strategy: "strategy", scopes: ["scopes"] }],
            next: "next",
        };
        server
            .mockEndpoint()
            .get("/connected-accounts/connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            connections: [
                {
                    name: "name",
                    strategy: "strategy",
                    scopes: ["scopes"],
                },
            ],
            next: "next",
        };
        const page = await client.connectedAccounts.connections.list({
            from: "from",
            take: 1,
        });

        expect(expected.connections).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.connections).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/connections")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.connections.list();
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/connections")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.connections.list();
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/connections")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.connections.list();
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/connections")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.connections.list();
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });
});
