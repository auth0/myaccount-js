// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { Auth0MyAccountClient } from "../../src/Client";
import * as Auth0MyAccount from "../../src/api/index";

describe("Factors", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { factors: [{ type: "password", usage: ["primary"] }] };
        server.mockEndpoint().get("/factors").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.factors.list();
        expect(response).toEqual({
            factors: [
                {
                    type: "password",
                    usage: ["primary"],
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/factors").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.factors.list();
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/factors").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.factors.list();
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/factors").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.factors.list();
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/factors").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.factors.list();
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });
});
