// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { Auth0MyAccountClient } from "../../src/Client";
import * as Auth0MyAccount from "../../src/api/index";

describe("ConnectedAccounts", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "connection", redirect_uri: "redirect_uri" };
        const rawResponseBody = {
            connect_uri: "connect_uri",
            auth_session: "auth_session",
            connect_params: { ticket: "ticket" },
            expires_in: 1,
        };
        server
            .mockEndpoint()
            .post("/connected-accounts/connect")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connectedAccounts.create({
            connection: "connection",
            redirect_uri: "redirect_uri",
        });
        expect(response).toEqual({
            connect_uri: "connect_uri",
            auth_session: "auth_session",
            connect_params: {
                ticket: "ticket",
            },
            expires_in: 1,
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/connect")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.create({
                connection: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/connect")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.create({
                connection: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/connect")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.create({
                connection: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/connect")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.create({
                connection: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("complete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            auth_session: "auth_session",
            connect_code: "connect_code",
            redirect_uri: "redirect_uri",
        };
        const rawResponseBody = {
            id: "id",
            connection: "connection",
            access_type: "offline",
            scopes: ["scopes"],
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/connected-accounts/complete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connectedAccounts.complete({
            auth_session: "auth_session",
            connect_code: "connect_code",
            redirect_uri: "redirect_uri",
        });
        expect(response).toEqual({
            id: "id",
            connection: "connection",
            access_type: "offline",
            scopes: ["scopes"],
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        });
    });

    test("complete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { auth_session: "auth_session", connect_code: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/complete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.complete({
                auth_session: "auth_session",
                connect_code: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("complete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { auth_session: "auth_session", connect_code: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/complete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.complete({
                auth_session: "auth_session",
                connect_code: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("complete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { auth_session: "auth_session", connect_code: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/complete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.complete({
                auth_session: "auth_session",
                connect_code: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("complete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { auth_session: "auth_session", connect_code: "x", redirect_uri: "redirect_uri" };
        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/connected-accounts/complete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.complete({
                auth_session: "auth_session",
                connect_code: "x",
                redirect_uri: "redirect_uri",
            });
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            accounts: [
                {
                    id: "id",
                    connection: "connection",
                    access_type: "offline",
                    scopes: ["scopes"],
                    created_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                },
            ],
            next: "next",
        };
        server
            .mockEndpoint()
            .get("/connected-accounts/accounts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            accounts: [
                {
                    id: "id",
                    connection: "connection",
                    access_type: "offline",
                    scopes: ["scopes"],
                    created_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                },
            ],
            next: "next",
        };
        const page = await client.connectedAccounts.list({
            connection: "connection",
            from: "from",
            take: 1,
        });

        expect(expected.accounts).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.accounts).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/accounts")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.list();
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/accounts")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.list();
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/accounts")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.list();
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/connected-accounts/accounts")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.list();
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/connected-accounts/accounts/id").respondWith().statusCode(200).build();

        const response = await client.connectedAccounts.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/connected-accounts/accounts/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.delete("id");
        }).rejects.toThrow(Auth0MyAccount.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/connected-accounts/accounts/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.delete("id");
        }).rejects.toThrow(Auth0MyAccount.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/connected-accounts/accounts/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.delete("id");
        }).rejects.toThrow(Auth0MyAccount.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyAccountClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1.1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/connected-accounts/accounts/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connectedAccounts.delete("id");
        }).rejects.toThrow(Auth0MyAccount.TooManyRequestsError);
    });
});
